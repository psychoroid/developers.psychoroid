{
  "advanced-guides/error-handling": {
    "name": "error-handling",
    "content": "Error Handling\n\n\nWhen integrating with psychoroid.com, it's essential to handle errors gracefully to provide a smooth payment experience for your customers. psychoroid.com returns meaningful error codes and messages that you can use to troubleshoot issues and inform your customers about the status of their transactions.\n\nError Response Format\n\n\nWhen an error occurs, psychoroid.com returns an HTTP status code in the 4xx or 5xx range, along with a JSON payload containing more details about the error. The error response format looks like this:\n\n```json\n{\n  \"error\": {\n    \"code\": \"error_code\",\n    \"message\": \"Error message describing the issue\",\n    \"details\": {\n      \"field1\": \"Detailed error message for field1\",\n      \"field2\": \"Detailed error message for field2\"\n    }\n  }\n}\n```\n\nCommon Error Codes\n\n\nHere are some common error codes you might encounter when working with psychoroid.com:\n\n- `authentication_error`: The API key or authentication token is invalid or missing.\n- `invalid_request_error`: The request is missing required parameters or has invalid values.\n- `payment_method_error`: The specified payment method is invalid or not supported.\n- `transaction_declined`: The payment transaction was declined by the payment provider.\n- `server_error`: An unexpected error occurred on the psychoroid.com server.\n\nFor a complete list of error codes and their meanings, refer to the [psychoroid.com API documentation](\n\nHandling Errors in Your Code\n\n\nWhen making requests to the psychoroid.com API, check the response status code and handle errors accordingly. Here's an example of handling errors in JavaScript:\n\n```javascript\ntry {\n  const response = await axios.post(' {\n    // Payment request payload\n  });\n\n  if (response.status === 200) {\n    // Payment successful\n  } else {\n    // Payment failed\n    const error = response.data.error;\n    console.error(`Payment failed with code: ${error.code}`);\n    console.error(`Error message: ${error.message}`);\n    // Handle the error based on the error code\n  }\n} catch (error) {\n  console.error('Request failed:', error);\n  // Handle network or other errors\n}\n```\n\nBest Practices\n\n\n- Handle errors gracefully and provide meaningful feedback to your customers\n- Log errors for debugging and monitoring purposes\n- Retry failed requests with exponential backoff to handle transient issues\n- Use idempotency keys to avoid duplicate transactions in case of retries\n- Keep your integration code up-to-date with the latest psychoroid.com API version and error codes\n\nBy properly handling errors, you can ensure a smooth payment experience for your customers and quickly troubleshoot any issues that arise. ",
    "parentName": "advanced-guides",
    "path": "advanced-guides/error-handling"
  },
  "advanced-guides/handling-webhooks": {
    "name": "handling-webhooks",
    "content": "Handling Webhooks\n\n\nWebhooks allow you to receive real-time notifications from psychoroid.com about events related to your payment transactions. By configuring webhooks, you can keep your system in sync with psychoroid.com and react to payment events as they occur.\n\nConfiguring Webhooks\n\n\n1. Log in to your psychoroid.com dashboard and navigate to the \"Webhooks\" section.\n2. Click on the \"Add Webhook\" button.\n3. Enter the URL where you want to receive the webhook notifications.\n4. Select the events you want to subscribe to (e.g., payment.success, payment.failed).\n5. Save your webhook configuration.\n\nVerifying Webhook Signatures\n\n\nTo ensure the authenticity of webhook requests, psychoroid.com signs each request with a secret key. You should verify the signature to confirm that the request originated from psychoroid.com.\n\nHere's an example of how to verify the webhook signature in Node.js:\n\n```javascript\nconst crypto = require('crypto');\n\nconst secret = 'your_webhook_secret';\nconst signature = req.headers['x-lomi-signature'];\nconst payload = JSON.stringify(req.body);\n\nconst expectedSignature = crypto\n  .createHmac('sha256', secret)\n  .update(payload)\n  .digest('hex');\n\nif (signature === expectedSignature) {\n  // Webhook is authentic\n} else {\n  // Webhook is not authentic\n}\n```\n\nHandling Webhook Events\n\n\nWhen you receive a webhook notification, parse the payload and handle the event based on its type. Here's an example of handling a `payment.success` event:\n\n```javascript\napp.post('/webhooks', (req, res) => {\n  const event = req.body;\n\n  if (event.type === 'payment.success') {\n    const paymentId = event.data.id;\n    const amount = event.data.amount;\n    const currency = event.data.currency;\n\n    // Update your database or perform any necessary actions\n    // ...\n\n    console.log(`Payment ${paymentId} succeeded. Amount: ${amount} ${currency}`);\n  }\n\n  res.sendStatus(200);\n});\n```\n\nBest Practices\n\n\n- Verify webhook signatures to ensure authenticity\n- Respond quickly to webhook requests to avoid timeouts\n- Handle errors gracefully and log any failures\n- Use idempotency keys to handle duplicate events\n- Keep your webhook endpoint secure and accessible\n\nBy properly handling webhooks, you can keep your system synchronized with psychoroid.com and provide a seamless payment experience for your customers. ",
    "parentName": "advanced-guides",
    "path": "advanced-guides/handling-webhooks"
  },
  "advanced-guides/idempotency-keys": {
    "name": "idempotency-keys",
    "content": "Idempotency Keys\n\n\nIdempotency keys are unique identifiers that you can include in your API requests to ensure that the same operation is not executed multiple times. This is particularly useful when dealing with network issues or timeouts, where a request might be retried, and you want to avoid duplicate transactions.\n\nUsing Idempotency Keys\n\n\nTo use an idempotency key, include it in the `Idempotency-Key` header of your API request:\n\n```bash\ncurl -X POST \\\n   \\\n  -H 'Authorization: Bearer your_api_key' \\\n  -H 'Idempotency-Key: unique_key_for_this_request' \\\n  -d '{\n    \"amount\": 1000,\n    \"currency\": \"XOF\",\n    \"payment_method\": \"mtn_mobile_money\",\n    \"customer\": {\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\"\n    }\n  }'\n```\n\nIf you make multiple requests with the same idempotency key, psychoroid.com will process the request only once and return the same response for subsequent requests.\n\nGenerating Idempotency Keys\n\n\nIdempotency keys should be unique for each distinct request. You can generate them using a combination of the request parameters and a unique identifier, such as a UUID or a timestamp.\n\nHere's an example of generating an idempotency key in JavaScript:\n\n```javascript\nconst crypto = require('crypto');\n\nfunction generateIdempotencyKey(params) {\n  const input = JSON.stringify(params);\n  const hash = crypto.createHash('sha256').update(input).digest('hex');\n  const timestamp = Date.now().toString();\n  return `${hash}_${timestamp}`;\n}\n\nconst params = {\n  amount: 1000,\n  currency: 'XOF',\n  payment_method: 'mtn_mobile_money',\n  customer: {\n    name: 'John Doe',\n    email: 'john@example.com'\n  }\n};\n\nconst idempotencyKey = generateIdempotencyKey(params);\n```\n\nBest Practices\n\n\n- Use unique idempotency keys for each distinct request\n- Include all relevant request parameters when generating the key\n- Store the idempotency key and the corresponding response in your database to handle duplicate requests\n- Set a reasonable expiration time for idempotency keys to avoid key collisions\n\nBy implementing idempotency keys, you can ensure that your payment transactions are processed exactly once, even in the face of network issues or timeouts. ",
    "parentName": "advanced-guides",
    "path": "advanced-guides/idempotency-keys"
  },
  "advanced-guides/security-best-practices": {
    "name": "security-best-practices",
    "content": "Security Best Practices\n\n\nSecurity is of utmost importance when dealing with payment transactions. psychoroid.com provides a secure payment orchestration platform, but it's also crucial to follow security best practices in your own integration to protect your customers' sensitive information.\n\nSecure Communication\n\n\nAlways use HTTPS for all communication between your server and the psychoroid.com API. This ensures that all data transmitted is encrypted and protected from eavesdropping.\n\nProtect Your API Keys\n\n\nKeep your psychoroid.com API keys secure and never expose them in client-side code or publicly accessible repositories. Store them securely on your server and use environment variables to load them into your application.\n\nValidate and Sanitize User Input\n\n\nValidate and sanitize all user input before sending it to the psychoroid.com API. This helps prevent injection attacks and ensures that the data sent to psychoroid.com is in the expected format.\n\nUse Secure Authentication Methods\n\n\nWhen authenticating your customers, use secure methods such as OAuth 2.0 or JWT tokens. Avoid sending sensitive information, such as passwords, in plain text.\n\nImplement Secure Webhook Endpoints\n\n\nWhen configuring webhook endpoints to receive notifications from psychoroid.com, ensure that they are secure and accessible only to psychoroid.com. Validate the webhook signatures to verify the authenticity of the requests.\n\nRegularly Update Your Integration\n\n\nKeep your psychoroid.com integration code up-to-date with the latest security patches and API updates. Regularly monitor the psychoroid.com changelog and update your code accordingly.\n\nLimit Access to Sensitive Data\n\n\nRestrict access to sensitive customer and transaction data to only those who need it. Implement proper access controls and logging to detect and prevent unauthorized access.\n\nEducate Your Team\n\n\nEducate your team about security best practices and ensure that everyone understands their role in keeping your integration secure. Regularly review and update your security policies and procedures.\n\nMonitor and Audit Your Systems\n\n\nImplement monitoring and auditing mechanisms to detect and respond to security incidents promptly. Regularly review your logs and access records to identify any suspicious activities.\n\nBy following these security best practices, you can ensure that your psychoroid.com integration is secure and protect your customers' sensitive information. ",
    "parentName": "advanced-guides",
    "path": "advanced-guides/security-best-practices"
  },
  "get-started/psychoroid-basics/create-merchant-account": {
    "name": "create-merchant-account",
    "content": "Creating your merchant account\n\n\nTo start using psychoroid.com, you first need to create an account. \n\n1. Visit the [psychoroid.com website]( and click on the \"Sign Up\" button.\n2. Get through the KYC process and fill in your business details, including your company name, contact information, and the payment methods you want to support.\n3. Agree to our terms of service.\n4. You will receive a confirmation email. Click the link in the email to verify your account.\n\nCongratulations! You have successfully created your psychoroid.com merchant account. You can now log in to your dashboard and start configuring your payment integration.",
    "parentName": "get-started",
    "path": "get-started/psychoroid-basics/create-merchant-account"
  },
  "get-started/psychoroid-basics/process-transactions": {
    "name": "process-transactions",
    "content": "Processing Transactions\n\n\nWith psychoroid.com integrated into your application or website, you can start processing transactions.\n\n1. When a customer initiates a payment on your website or app, send a payment request to psychoroid.com using the appropriate API endpoint or SDK method.\n\n2. psychoroid.com will handle the payment flow, securely collecting the customer's payment details and processing the transaction through the selected payment method.\n\n3. You will receive a response indicating the status of the transaction (success, failure, or pending).\n\n4. Use webhooks to receive real-time notifications about transaction updates and status changes.\n\n5. Manage and track your transactions through the psychoroid.com dashboard, which provides detailed reporting and analytics.\n\npsychoroid.com ensures secure and reliable payment processing, with built-in fraud detection and PCI DSS compliance.\n\nFor more information on transaction processing and best practices, refer to the [Transaction Processing Guide](../transactions/overview). Please note that you can also use psychoroid.com in a Low-code and No-code set-up.",
    "parentName": "get-started",
    "path": "get-started/psychoroid-basics/process-transactions"
  },
  "get-started/psychoroid-basics/setup-payment-methods": {
    "name": "setup-payment-methods",
    "content": "Setting Up Payment Methods\n\n\nAfter creating your merchant account, the next step is to set up the payment methods you want to offer to your customers.\n\n1. Log in to your dashboard.\n2. Navigate to the \"Payment Methods\" section.\n3. Select the payment method you want to add (e.g., MTN, Wave or Orange Mobile Money).\n\nRepeat these steps for each payment method you want to support. psychoroid.com will handle the integration with the respective payment providers automatically.\n\nFeel free to customize your checkout experience, set up webhooks for real-time notifications, and explore other features available in your dashboard.",
    "parentName": "get-started",
    "path": "get-started/psychoroid-basics/setup-payment-methods"
  },
  "get-started/psychoroid-basics/sign-up": {
    "name": "sign-up",
    "content": "Getting Started with psychoroid.com\n\n\nTo start using psychoroid.com for your payment processing needs, follow these steps:\n\n1. **Sign up**: Visit [psychoroid.com's website]( and create a merchant account.\n\n2. **Set up payment methods**: Configure the payment methods you want to support in your psychoroid.com dashboard.\n\n3. **Integrate with your application**: Use psychoroid.com's API or SDKs to integrate payment processing into your application. Refer to the [Integration Guide](../integration/getting-started) for detailed instructions.\n\n4. **Test your integration**: Use psychoroid.com's testing environment to simulate transactions and ensure your integration is working as expected.\n\n5. **Go live**: Once you've thoroughly tested your integration, switch to live mode and start processing real transactions.\n\npsychoroid.com provides comprehensive documentation, SDKs, and support to help you get started quickly and smoothly.\n",
    "parentName": "get-started",
    "path": "get-started/psychoroid-basics/sign-up"
  },
  "get-started/variables/api-keys": {
    "name": "api-keys",
    "content": "API Keys\n\n\nAPI keys are used to authenticate your integration with the psychoroid.com API. It's essential to keep your API keys secure and manage them effectively.\n\nCreating API Keys\n\n\nTo create an API key:\n\n1. Log in to your psychoroid.com account and navigate to the \"Settings\" page.\n2. Click on the \"API Keys\" tab.\n3. Click the \"Create API Key\" button.\n4. Enter a name for your API key and select the appropriate permissions.\n5. Click \"Create\" to generate your API key.\n6. Copy and save your Key!\n\nUsing API Keys\n\n\nTo use your API key, include it in the `Authorization` header of your API requests:\n\n```bash\nAuthorization: Bearer YOUR_API_KEY\n```\n\nIn your integration code, you can store your API key as an environment variable and reference it using the `{{ENV_VAR_NAME}}` syntax:\n\n```javascript\nconst apiKey = '{{LOMI_API_KEY}}';\nconst headers = {\n  'Authorization': `Bearer ${apiKey}`,\n  'Content-Type': 'application/json'\n};\n```\n\nBest Practices\n\n\n- Keep your API keys secure and never share them with anyone.\n- Regularly rotate your API keys to minimize the risk of unauthorized access.\n- Use environment variables to store your API keys instead of hardcoding them in your integration code.\n- Restrict the permissions of your API keys to the minimum required for your integration to function.\n\nBy following these best practices, you can ensure the security and integrity of your psychoroid.com integration. ",
    "parentName": "get-started",
    "path": "get-started/variables/api-keys"
  },
  "get-started/variables/overview": {
    "name": "overview",
    "content": "Variables\n\n\nVariables in psychoroid.com allow you to store and manage dynamic values that can be used across your payment integration setup. This feature enhances flexibility, maintainability, and security by enabling you to manage sensitive data, such as API keys, in a centralized manner.\n\npsychoroid.com supports the use of variables, specifically API keys, to authenticate and secure your integration with the psychoroid.com API.\n\n- [API Keys](./api-keys): Manage your API keys securely and use them to authenticate your requests to the psychoroid.com API.\n\nBy leveraging variables, you can keep your integration setup clean, maintainable, and secure, while easily managing your API credentials.",
    "parentName": "get-started",
    "path": "get-started/variables/overview"
  },
  "git-integration/best-practices": {
    "name": "best-practices",
    "content": "Best Practices for Git Integration\n\n\nWhen integrating psychoroid.com with your application, follow these best practices to ensure a smooth and secure development process:\n\n1. **Use a version control system**: Always store your integration code and configuration files in a version control system like Git. This allows you to track changes, collaborate with your team, and maintain a history of your integration setup.\n\n2. **Keep sensitive information separate**: Never store sensitive information like API keys, secrets, and credentials in version control. Instead, use environment variables or secure key management systems to handle sensitive data.\n\n3. **Ignore generated files**: Add generated files and directories (e.g., `node_modules`, `.next`, `.env`) to your `.gitignore` file to prevent them from being committed to your repository.\n\n4. **Commit frequently**: Make small, focused commits that cover a single logical change. This makes it easier to understand the history of your codebase and revert changes if needed.\n\n5. **Write descriptive commit messages**: Use clear and concise commit messages that explain the purpose of each change. This helps other team members (and your future self) understand the history of your codebase.\n\nBy following these best practices, you can maintain a clean and organized codebase while effectively collaborating with your team. ",
    "parentName": "git-integration",
    "path": "git-integration/best-practices"
  },
  "git-integration/bounty-program": {
    "name": "bounty-program",
    "content": "Bounty Program\n\n\nTo encourage and reward contributions to psychoroid.com, we have established a bounty program. Developers can earn rewards for completing specific tasks, such as:\n\n- Developing new payment integrations\n- Implementing new features\n- Solving technical issues and bugs\n- Improving the platform's security\n- Enhancing documentation and tutorials\n\nAvailable Bounties\n\n\nCheck out our [Bounties Board]( on GitHub to see the list of available bounties and their respective rewards.\n\nClaiming a Bounty\n\n\nTo claim a bounty, follow these steps:\n\n1. Choose a bounty from the [Bounties Board]( that you want to work on.\n2. Comment on the issue, expressing your interest in taking on the bounty.\n3. The psychoroid.com team will review your request and assign the bounty to you if approved.\n4. Work on the bounty, following the contributing guidelines and any specific requirements mentioned in the issue.\n5. Submit a pull request with your solution, referencing the bounty issue.\n6. The psychoroid.com team will review your pull request and merge it if it meets the requirements.\n7. Once your pull request is merged, you will receive the bounty reward.\n\nBounty Rewards\n\n\nBounty rewards are paid out in USD via PayPal or other agreed-upon payment methods. The reward amount for each bounty is specified on the [Bounties Board](\n\nWe reserve the right to modify the bounty program and reward amounts at any time.\n\nHappy bounty hunting! ",
    "parentName": "git-integration",
    "path": "git-integration/bounty-program"
  },
  "git-integration/branching-strategy": {
    "name": "branching-strategy",
    "content": "Branching Strategy\n\n\nWhen working on your psychoroid.com integration, it's important to use a consistent branching strategy to manage your codebase. We recommend the following branching strategy:\n\n- `main` (or `master`): The main branch that contains the stable, production-ready code.\n- `develop`: The branch that contains the latest development changes that are ready for testing.\n- `feature/*`: Branches used for developing new features. These branches should be created from the `develop` branch and merged back into `develop` when the feature is complete.\n- `bugfix/*`: Branches used for fixing bugs. These branches should be created from the `develop` branch and merged back into `develop` when the bug is fixed.\n- `release/*`: Branches used for preparing a new release. These branches should be created from the `develop` branch and merged into both `main` and `develop` when the release is ready.\n- `hotfix/*`: Branches used for fixing critical bugs in production. These branches should be created from the `main` branch and merged into both `main` and `develop` when the hotfix is complete.\n\nBy using this branching strategy, you can ensure that your codebase remains stable and organized while allowing for parallel development of features and bug fixes. ",
    "parentName": "git-integration",
    "path": "git-integration/branching-strategy"
  },
  "git-integration/code-of-conduct": {
    "name": "code-of-conduct",
    "content": "Code of Conduct\n\n\nAs contributors and maintainers of the psychoroid.com project, we pledge to create a welcoming and inclusive environment for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nOur Standards\n\n\nExamples of behavior that contributes to creating a positive environment include:\n\n- Using welcoming and inclusive language\n- Being respectful of differing viewpoints and experiences\n- Gracefully accepting constructive criticism\n- Focusing on what is best for the community\n- Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n- The use of sexualized language or imagery and unwelcome sexual attention or advances\n- Trolling, insulting/derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or electronic address, without explicit permission\n- Other conduct which could reasonably be considered inappropriate in a professional setting\n\nOur Responsibilities\n\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nScope\n\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community.\n\nEnforcement\n\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [dev@psychoroid.com](mailto:dev@psychoroid.com). All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\nAttribution\n\n\nThis Code of Conduct is adapted from the [Contributor Covenant]( version 1.4, available at [ ",
    "parentName": "git-integration",
    "path": "git-integration/code-of-conduct"
  },
  "git-integration/code-reviews": {
    "name": "code-reviews",
    "content": "Code Reviews\n\n\nCode reviews are an essential part of maintaining a high-quality codebase. When working on your psychoroid.com integration, make sure to:\n\n1. **Create pull requests**: When a feature or bug fix is complete, create a pull request to merge the changes into the `develop` branch.\n\n2. **Review code changes**: Have at least one other team member review the code changes in the pull request. Look for potential bugs, security issues, and opportunities for improvement.\n\n3. **Discuss and address feedback**: Use the pull request comments to discuss any issues or suggestions for improvement. Make sure to address all feedback before merging the changes.\n\n4. **Test thoroughly**: Before merging a pull request, make sure to thoroughly test the changes to ensure that they work as expected and do not introduce any new bugs.\n\nBy incorporating code reviews into your development process, you can catch potential issues early and ensure that your codebase remains maintainable and secure. ",
    "parentName": "git-integration",
    "path": "git-integration/code-reviews"
  },
  "git-integration/contributing-guidelines": {
    "name": "contributing-guidelines",
    "content": "Contributing Guidelines\n\n\nTo ensure a smooth and effective collaboration, please follow these guidelines when contributing to psychoroid.com:\n\n1. **Code Style**: Follow the existing code style and conventions used in the psychoroid.com codebase. We use [Prettier]( for code formatting and [ESLint]( for linting.\n\n2. **Documentation**: Update the relevant documentation when making changes to the codebase. This includes inline comments, README files, and API documentation.\n\n3. **Testing**: Write unit tests for new features and bug fixes. Ensure that all tests pass before submitting a pull request.\n\n4. **Commit Messages**: Write clear and descriptive commit messages that explain the purpose of your changes. Use the present tense and imperative mood (e.g., \"Add feature\" instead of \"Added feature\").\n\n5. **Pull Requests**: Keep pull requests focused on a single feature, bug fix, or improvement. Provide a detailed description of your changes and reference any relevant issues.\n\n6. **Code Reviews**: Be open to feedback and constructive criticism during the code review process. Address any comments or suggestions made by the maintainers.\n\n7. **Licensing**: By contributing to psychoroid.com, you agree that your contributions will be licensed under the [MIT License](\n\nWe appreciate your adherence to these guidelines and your efforts to make psychoroid.com a better platform for everyone. ",
    "parentName": "git-integration",
    "path": "git-integration/contributing-guidelines"
  },
  "git-integration/overview": {
    "name": "overview",
    "content": "Contributing to psychoroid.com\n\n\nWelcome to the Contributing Guide for psychoroid.com, an open-source payment orchestration platform designed to simplify payment processing across Africa.\n\nWe believe in the power of open-source collaboration and welcome contributions from developers, designers, and payment enthusiasts who share our vision of transforming the payment landscape in Africa.\n\nBy contributing to psychoroid.com, you can:\n- Help improve the platform's features and functionality\n- Develop new payment integrations\n- Solve technical issues and bugs\n- Enhance the platform's security\n- Expand psychoroid.com's reach and impact\n\nIn the following sections, you'll find information on how to get started with contributing, our contributing guidelines, the bounty program, and our code of conduct.\n\nWe appreciate your interest in contributing to psychoroid.com and look forward to collaborating with you!",
    "parentName": "git-integration",
    "path": "git-integration/overview"
  },
  "git-integration/using-cli": {
    "name": "using-cli",
    "content": "Using Git CLI for Collaboration\n\n\nWhen collaborating on your psychoroid.com integration using Git, you can use the command-line interface (CLI) to perform various Git operations. This allows you to manage your integration code and configurations effectively.\n\nInitializing a Git Repository\n\n\nTo get started, initialize a Git repository in the directory where your integration code and configuration files are stored:\n\n```bash\ngit init\n```\n\nStaging and Committing Changes\n\n\nAfter making changes to your integration code or configurations, stage the changes using the `git add` command:\n\n```bash\ngit add .\n```\n\nThen, commit the changes with a descriptive message:\n\n```bash\ngit commit -m \"Update payment provider configuration\"\n```\n\nPushing Changes to a Remote Repository\n\n\nTo collaborate with your team, push your changes to a remote repository:\n\n```bash\ngit push origin main\n```\n\nReplace `main` with the appropriate branch name if you're using a different branching strategy.\n\nPulling Changes from a Remote Repository\n\n\nTo get the latest changes made by your team members, pull the changes from the remote repository:\n\n```bash\ngit pull origin main\n```\n\nAgain, replace `main` with the appropriate branch name if necessary.\n\nResolving Merge Conflicts\n\n\nIf you encounter merge conflicts when pulling changes, you'll need to resolve them manually. Open the conflicting files, make the necessary changes, and then stage and commit the resolved files:\n\n```bash\ngit add resolved_file.js\ngit commit -m \"Resolve merge conflicts\"\n```\n\nBest Practices\n\n\n- Commit frequently with descriptive messages\n- Use branches for developing new features or configurations\n- Regularly pull changes from the remote repository to stay up-to-date\n- Resolve merge conflicts carefully and communicate with your team\n\nBy using the Git CLI effectively and following best practices, you can collaborate smoothly with your team on your psychoroid.com integration.\n",
    "parentName": "git-integration",
    "path": "git-integration/using-cli"
  },
  "git-integration/versioning": {
    "name": "versioning",
    "content": "Versioning\n\n\nVersioning your psychoroid.com integration is important for tracking changes and managing releases. We recommend using semantic versioning (SemVer) for your integration.\n\nWith SemVer, each version number consists of three parts: `MAJOR.MINOR.PATCH`.\n\n- `MAJOR`: Increment this when you make incompatible API changes.\n- `MINOR`: Increment this when you add functionality in a backwards-compatible manner.\n- `PATCH`: Increment this when you make backwards-compatible bug fixes.\n\nWhen preparing a new release:\n\n1. **Update the version number**: Increment the appropriate part of the version number based on the changes included in the release.\n\n2. **Create a release branch**: Create a new branch from `develop` with the name `release/X.Y.Z`, where `X.Y.Z` is the new version number.\n\n3. **Finalize the release**: Make any necessary final changes to the release branch, such as updating documentation or fixing last-minute bugs.\n\n4. **Merge the release branch**: Once the release is ready, merge the release branch into both `main` and `develop`.\n\n5. **Tag the release**: Create a new Git tag with the version number (e.g., `v1.2.3`) to mark the release point in your codebase.\n\nBy following a consistent versioning scheme and release process, you can make it easier to manage your integration and communicate changes to your team and users. ",
    "parentName": "git-integration",
    "path": "git-integration/versioning"
  },
  "introduction/feedback-community": {
    "name": "feedback-community",
    "content": "Feedback & Community \n\n\nWe are building a community of merchants, developers, and payment innovators who are committed to transform payment. Our platform evolution and feature development are driven by real merchant needs and market requirements.\n\nHelp us continue building Africa's most comprehensive and merchant-friendly payment orchestration platform!\n\nHow to Engage\n\n- Raise an issue on [GitHub]( \n- Follow us and [star us](\n- Contact our [team](mailto:dev@psychoroid.com)\n- Visit our [Website](\n- Use our solution to sell!\n\nFor Developers\n\n- Explore our [API Documentation](../api-reference/overview)\n- Check out our [Integration Guides](../integration/getting-started)\n- Read our [Security Guidelines](../security/overview)\n- View our [SDK Documentation](../sdks/overview)\n- Look for feature requests and make a contribution",
    "parentName": "introduction",
    "path": "introduction/feedback-community"
  },
  "introduction/manifesto": {
    "name": "manifesto",
    "content": "Manifesto\n\n\nThe time has come to transform payment processing across Africa.\n\nWe believe that accepting payments shouldn't be complex, regardless of where you operate or what payment methods your customers prefer. The fragmented payment landscape in Africa creates unnecessary barriers and friction for businesses trying to grow.\n\npsychoroid.com addresses these challenges with an open approach to payment orchestration. We believe that:\n\n- **Payment processing should be simple**: One integration to accept all the payment methods you want!\n- **Security is non-negotiable**: Every transaction is protected with industry-leading security measures\n- **Innovation should be accessible**: Advanced features like fraud detection and analytics are available to all businesses\n- **Integration should be seamless**: Adding new payment methods is straightforward and hassle-free\n- **Compliance is built-in**: Meeting regulatory requirements is part of our platform's foundation\n\nWe envision a Continent where any business can easily accept payments from their customers, using any payment method, without worrying about the complexity behind the scenes.\n\nJoin us in our mission to simplify payment processing across Africa.",
    "parentName": "introduction",
    "path": "introduction/manifesto"
  },
  "introduction/what-is-psychoroid": {
    "name": "what-is-psychoroid",
    "content": "What is psychoroid.com?\n\n\npsychoroid.com is a unified, open-source payment orchestration platform built to transform payment processing across Africa. We seamlessly integrate multiple payment providers and related payment methods while providing a comprehensive solution for merchants.\n\nWe aim to solve two core challenges:\n\n**Payment Complexity**\n\n\npsychoroid.com's mission is to simplify the complex landscape of African payments through a unified platform that:\n\n- Integrates multiple payment methods (Credit cards, MTN Momo, Wave, Orange Money — and counting!)\n- Provides comprehensive reporting and analytics\n- Offers great and highly customizable checkout experiences\n- Ensures secure, reliable payment processing\n\n> *You can get started by creating an account on [psychoroid.com](\n\n**Security and Compliance**\n\n\nPayment processing demands the highest levels of security and compliance. psychoroid.com is built with:\n\n- Robust fraud detection and prevention\n- Secure tokenization and data storage\n- Comprehensive audit trails\n\nThe platform is designed with security-first principles, ensuring that both merchants and their customers can transact with confidence.",
    "parentName": "introduction",
    "path": "introduction/what-is-psychoroid"
  },
  "license-management/open-source": {
    "name": "open-source",
    "content": "Open Source Licensing\n\n\npsychoroid.com is committed to providing a powerful and accessible payment orchestration platform for everyone. As part of this commitment, we offer an open-source version of our platform under the an Apache License on our Github.\n\nWe are here to help you make money\n\n\nFor regular merchants of our open-source version, there is no need to worry about this. You can simply start using lomi on our website without any restrictions and/or additional setup.\n\nFeatures and Limitations\n\n\nWhile the open-source version of psychoroid.com provides a comprehensive set of features for payment orchestration, it may lack some of the advanced capabilities and support offered in our hosted platform.\n\nFor a detailed comparison of the features available in each version, please refer to our [feature matrix](\n\nGoing live by hosting the solution myself\n\n\nIf you would like to host the platform yourself, you can easily get started by cloning our main repo. However you'll have to get providers API keys by contacting them yourself.\n\nIf you find that your business do not need to host it manually andrequires more advanced features, dedicated support, or enterprise-grade capabilities, you can just get started on the [main platform](\n\nTo learn more about our vision and why psychoroid.com is open-source, please visit our [About page]( or [contact our founder](mailto:dev@psychoroid.com). ",
    "parentName": "license-management",
    "path": "license-management/open-source"
  },
  "license-management/overview": {
    "name": "overview",
    "content": "License Management\n\n\npsychoroid.com offers both an open-source solution and a hosted platform to cater to the diverse needs of our users. This section provides an overview of the licensing options available and how to manage them.\n\nOpen Source\n\n\nFor users who prefer to self-host the psychoroid.com platform, we provide an open-source version of our software. There is no need for license management when using the open-source version. Simply download the source code from our GitHub repository, install it on your own infrastructure, and start using psychoroid.com without any restrictions.\n\nWhile the open-source version provides a comprehensive set of features for payment orchestration, it may lack some of the advanced capabilities and support offered by our hosted platform. For a detailed comparison of the features available in each version, please refer to our [feature matrix](\n\nHosted Platform\n\n\nFor businesses that prefer a fully-managed solution, we offer a hosted platform on our website. The hosted platform provides additional features, dedicated support, and benefits tailored to the needs of growing businesses.\n\nTo get started with the hosted platform, simply create an account on [psychoroid.com]( and follow the setup instructions. Our team will be available to assist you throughout the process and provide guidance on optimizing your payment orchestration setup.\n\nIf you have any questions about the differences between the open-source and hosted versions of psychoroid.com, or if you need help deciding which option is best suited for your needs, please don't hesitate to reach out to our team at [dev@psychoroid.com](mailto:dev@psychoroid.com).",
    "parentName": "license-management",
    "path": "license-management/overview"
  },
  "lomi-cli/overview": {
    "name": "overview",
    "content": "psychoroid.com CLI\n\n\nLeveraging psychoroid.com CLI allows you to interact with your account and perform various tasks related to your payment integration setup using simple command-line commands.\n\nThis makes it easier to manage your payment integrations, test your setup in different environments, automate your testing process, and deploy the applicaiton more easily.\n\nInstallation\n\n\nTo install the psychoroid.com CLI, use the package manager of your choice, such as NPM:\n\n```bash copy\nnpm install -g @lomi/cli\n```\n\nAuthentication\n\n\nTo use the psychoroid.com CLI, you need to authenticate with your psychoroid.com account. You can do this by setting the `LOMI_API_KEY` environment variable to your API key:\n\n```bash copy\nexport LOMI_API_KEY=your_api_key_here\n```\n\nAlternatively, you can pass the API key as a command-line argument using the `--api-key` flag:\n\n```bash copy\nlomi --api-key your_api_key_here command\n```\n\nCommands\n\n\n`lomi setup`\n\n\nThe `setup` command helps you set up your psychoroid.com integration by guiding you through the process of creating a merchant account, setting up payment methods, and configuring your integration settings.\n\n```bash copy\nlomi setup\n```\n\n`lomi test`\n\n\nThe `test` command allows you to test your payment integration by simulating transactions and verifying that your integration is working as expected.\n\n```bash copy\nlomi test\n```\n\n`lomi transactions`\n\n\nThe `transactions` command allows you to view and manage your transactions. You can list recent transactions, view transaction details, and perform actions such as refunds or captures.\n\n```bash copy\nlomi transactions list\nlomi transactions view \nlomi transactions refund \nlomi transactions capture \n```\n\n`lomi webhooks`\n\n\nThe `webhooks` command allows you to manage your webhooks. You can list your registered webhooks, create new webhooks, and delete existing webhooks.\n\n```bash copy\nlomi webhooks list\nlomi webhooks create --url  --events \nlomi webhooks delete \n```\n\nSupport\n\n\nIf you encounter any issues or have any questions or feedback, please contact our support team at [dev@psychoroid.com](mailto:dev@psychoroid.com) or visit our [documentation]( for more information.\n",
    "parentName": "lomi-cli",
    "path": "lomi-cli/overview"
  }
}